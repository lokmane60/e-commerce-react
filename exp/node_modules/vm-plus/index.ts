
import defaults = require("lodash/defaults")
import assign = require("lodash/assign")
import pick = require("lodash/pick")
import omit = require("lodash/omit")
import values = require("lodash/values")
import * as vm from "vm"
import { RunningScriptOptions } from "vm"

interface Offset {
  lineOffset: number
  columnOffset: number
}

interface VMOptions {
  locals?: object;
  globals?: object;
}

interface CompileOptions extends RunningScriptOptions {
  locals?: object;
}

interface RunOptions extends RunningScriptOptions {
  locals?: object;
}


class VM {

  context = vm.createContext()
  locals = {}

  constructor(opts: VMOptions = {}) {
    if (typeof opts.globals !== 'undefined') {
      assign(this.context, opts.globals)
    }
    if (typeof opts.locals !== 'undefined') {
      assign(this.locals, opts.locals)
    }
  }

  global(name: string, val: any) {
    this.context[name] = val
    return this
  }

  local(name: string, val: any) {
    this.locals[name] = val
    return this
  }

  runNaked(code: string, opts?) {
    return vm.runInContext(code, this.context, opts)
  }

  compile(code: string, locals: object = {}, opts: CompileOptions = {}) {

    defaults(opts, {
      lineOffset: 0
    , columnOffset: 0
    })

    defaults(locals, this.locals)

    const pre = `(function (${Object.keys(locals).join(',')}) { `
    opts.columnOffset -= pre.length

    const script = new vm.Script(pre+code+`\n})`, opts)
    const closure = script.runInContext(this.context, pick(opts, 'displayErrors'))
      
    return {
      run: () => {
        return closure(...values(locals))
      }
    }
  }

  run(code: string, locals: object = {}, opts: RunOptions = {}) {

    defaults(opts, {
      lineOffset: 0
    , columnOffset: 0
    })

    defaults(locals, this.locals)

    const pre = `(function (${Object.keys(locals).join(',')}) {`
    opts.columnOffset -= pre.length

    const closure = vm.runInContext(pre+code+`\n})`, this.context, opts)
    return closure(...values(locals))
  }

}

export = VM

