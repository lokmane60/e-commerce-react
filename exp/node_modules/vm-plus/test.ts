
import VM = require("./index")

import StackUtils = require('stack-utils')
import { expect } from "chai"

const stack = new StackUtils()

describe('a virtual machine', () => {

  it('can run a script nakedly', () => {
    const vm = new VM()
    vm.runNaked(`true`)
    vm.runNaked(`false`)
    vm.runNaked(`"boo!"`)
    vm.runNaked(`(function () { return 1 })`)
  })

  it('can run a script with custom locals', () => {
    const vm = new VM()
    vm.run(`foobar`, { foobar: 1 })
    vm.run(`baz()`, { baz: function () { return 1 } })
  })

  it('throws an error at the correct position', () => {
    const vm = new VM()
    try {
      vm.run(`foobar`, {}, { displayErrors: false })
    } catch(e) {
      const call = stack.parseLine(e.stack.split('\n')[1])
      expect(call.line).to.equal(1)
      expect(call.column).to.equal(1)
    }
  })

  it('throws an error at the correct position even when position is customized', () => {
    const vm = new VM()
    try {
      vm.run(`foobar`, {}, { displayErrors: false, lineOffset: 2, columnOffset: 6 })
    } catch(e) {
      const call = stack.parseLine(e.stack.split('\n')[1])
      expect(call.line).to.equal(3)
      expect(call.column).to.equal(7)
    }
  })

})

describe('a compiled script', () => {

  it('throws an error at the correct position', () => {
    const vm = new VM()
    try {
      vm.compile(`foobar`, {}, { displayErrors: false }).run()
    } catch(e) {
      const call = stack.parseLine(e.stack.split('\n')[1])
      expect(call.line).to.equal(1)
      expect(call.column).to.equal(1)
    }
  })

  it('throws an error at the correct position even when position is customized', () => {
    const vm = new VM()
    try {
      vm.compile(`foobar`, {}, { displayErrors: false, lineOffset: 2, columnOffset: 6 }).run()
    } catch(e) {
      const call = stack.parseLine(e.stack.split('\n')[1])
      expect(call.line).to.equal(3)
      expect(call.column).to.equal(7)
    }
  })

  it('can run a script with some locals', () => {
    const vm = new VM()
    vm.compile(`foobar`, { foobar: 1 }).run()
    vm.compile(`baz()`, { baz: function () { return 1 } }).run()
  })

  it('can run a script', () => {
    const vm = new VM()
    vm.compile(`true`).run()
    vm.compile(`false`).run()
    vm.compile(`"boo!"`).run()
  })

})

