"use strict";
const defaults = require("lodash/defaults");
const assign = require("lodash/assign");
const pick = require("lodash/pick");
const values = require("lodash/values");
const vm = require("vm");
class VM {
    constructor(opts = {}) {
        this.context = vm.createContext();
        this.locals = {};
        if (typeof opts.globals !== 'undefined') {
            assign(this.context, opts.globals);
        }
        if (typeof opts.locals !== 'undefined') {
            assign(this.locals, opts.locals);
        }
    }
    global(name, val) {
        this.context[name] = val;
        return this;
    }
    local(name, val) {
        this.locals[name] = val;
        return this;
    }
    runNaked(code, opts) {
        return vm.runInContext(code, this.context, opts);
    }
    compile(code, locals = {}, opts = {}) {
        defaults(opts, {
            lineOffset: 0,
            columnOffset: 0
        });
        defaults(locals, this.locals);
        const pre = `(function (${Object.keys(locals).join(',')}) { `;
        opts.columnOffset -= pre.length;
        const script = new vm.Script(pre + code + `\n})`, opts);
        const closure = script.runInContext(this.context, pick(opts, 'displayErrors'));
        return {
            run: () => {
                return closure(...values(locals));
            }
        };
    }
    run(code, locals = {}, opts = {}) {
        defaults(opts, {
            lineOffset: 0,
            columnOffset: 0
        });
        defaults(locals, this.locals);
        const pre = `(function (${Object.keys(locals).join(',')}) {`;
        opts.columnOffset -= pre.length;
        const closure = vm.runInContext(pre + code + `\n})`, this.context, opts);
        return closure(...values(locals));
    }
}
module.exports = VM;
