
import "source-map-support/register"

import NodeVM = require('./index')
import { expect } from "chai"

import * as path from "path"
import * as fs from "fs"

const SNIPPETS_DIR = __dirname;

describe('a NodeJS emulator', () => {

  it('can require a script', () => {
    const node = new NodeVM()
    const mod = node.getModule(path.join(SNIPPETS_DIR, './test_mod'))
    expect(mod.id).to.equal(fs.realpathSync(path.join(SNIPPETS_DIR, 'test_mod.js')))
    expect(mod.exports).to.deep.equal({ foo: 42 })
  })

  it('supports cyclic dependencies', () => {
    const node = new NodeVM()
    const a = node.getModule(path.join(SNIPPETS_DIR, './test_mod_a'))
    const b = node.getModule(path.join(SNIPPETS_DIR, './test_mod_b'))
    expect(a.exports.done).to.be.true
    expect(b.exports.done).to.be.true
  })

  it('reports correct __dirname and __filename', () => {
    const node = new NodeVM()
    const mod = node.getModule(path.join(SNIPPETS_DIR, './test_locals'))
    expect(mod.exports.__dirname).to.equal(SNIPPETS_DIR)
    expect(mod.exports.__filename).to.equal('test_locals.js')
  })

  it('has a working require.resolve()', () => {
    const node = new NodeVM()
    const mod = node.getModule(path.join(SNIPPETS_DIR, './test_locals'))
    expect(mod.exports.require.resolve('./test_mod_a')).to.equal(path.join(SNIPPETS_DIR, 'test_mod_a.js'))
  })

  it('caches modules', () => {
    const node = new NodeVM()
    fs.writeFileSync(path.join(SNIPPETS_DIR, 'test_cache.js'), `module.exports = 1`)
    const mod1 = node.getModule(path.join(SNIPPETS_DIR, './test_cache'))
    fs.writeFileSync(path.join(SNIPPETS_DIR, 'test_cache.js'), `module.exports = 2`)
    const mod2 = node.getModule(path.join(SNIPPETS_DIR, './test_cache'))
    expect(mod1.exports).to.equal(1)
    expect(mod2.exports).to.equal(1)
  })

  it('can evict an entry from the cache', () => {
    const node = new NodeVM()
    const mod1 = node.getModule(path.join(SNIPPETS_DIR, './test_evict'))
    expect(mod1.exports).to.equal(2)
  })

  it('can reload a module', () => {
    const node = new NodeVM()
    fs.writeFileSync(path.join(SNIPPETS_DIR, 'testreload.js'), `module.exports.foo = 1`)
    const mod1 = node.getModule(path.join(SNIPPETS_DIR, './testreload'))
    expect(mod1.exports.foo).to.equal(1)
    fs.writeFileSync(path.join(SNIPPETS_DIR, 'testreload.js'), `module.exports.foo = 2`)
    const mod2 = mod1.reload()
    expect(mod2.exports.foo).to.equal(2)
  })

  it('can recursively reload a module', () => {
    const node = new NodeVM()
    fs.writeFileSync(path.join(SNIPPETS_DIR, 'test_recreload.js'), `module.exports = require('./test_recreload_dep')`)
    fs.writeFileSync(path.join(SNIPPETS_DIR, 'test_recreload_dep.js'), `module.exports = 43`)
    const mod1 = node.getModule(path.join(SNIPPETS_DIR, './test_recreload'))
    expect(mod1.exports).to.equal(43)
    fs.writeFileSync(path.join(SNIPPETS_DIR, 'test_recreload_dep.js'), `module.exports = 44`)
    const mod2 = mod1.reload()
    expect(mod2.exports).to.equal(44)
  })

  it('can reload a cyclic dependency', () => {
    const node = new NodeVM()
    fs.writeFileSync(path.join(SNIPPETS_DIR, 'test_cycreload.js'), `module.exports = require('./test_cycreload_dep_a')`)
    fs.writeFileSync(path.join(SNIPPETS_DIR, 'test_cycreload_dep_a.js'), `module.exports.foo = 1; module.exports.b = require('./test_cycreload_dep_b')`)
    fs.writeFileSync(path.join(SNIPPETS_DIR, 'test_cycreload_dep_b.js'), `module.exports.foo = 2; module.exports.a = require('./test_cycreload_dep_a')`)
    const mod = node.getModule(path.join(SNIPPETS_DIR, './test_cycreload'))
    expect(mod.exports.foo).to.equal(1)
    expect(mod.exports.b.foo).to.equal(2)
    expect(mod.exports).to.equal(mod.exports.b.a)
    expect(mod.exports.b).to.equal(mod.exports.b.a.b)
    fs.writeFileSync(path.join(SNIPPETS_DIR, 'test_cycreload_dep_a.js'), `module.exports.foo = 3; module.exports.b = require('./test_cycreload_dep_b')`)
    fs.writeFileSync(path.join(SNIPPETS_DIR, 'test_cycreload_dep_b.js'), `module.exports.foo = 4; module.exports.a = require('./test_cycreload_dep_a')`)
    const mod2 = mod.reload()
    expect(mod2.exports.foo).to.equal(3)
    expect(mod2.exports.b.foo).to.equal(4)
    expect(mod2.exports).to.equal(mod2.exports.b.a)
    expect(mod2.exports.b).to.equal(mod2.exports.b.a.b)
  })

  it('emits a require-event when a new module is required', done => {
    const node = new NodeVM()
    node.on('require', () => {
      done()
    })
    node.getModule(path.join(SNIPPETS_DIR, './test_mod'))
  })

})

