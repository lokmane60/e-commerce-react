'use strict';

const NodeVM = require('vm-nodejs')
    , { EventEmitter } = require('events')
    , chokidar = require('chokidar')
    , resolveSync = require('resolve').sync

const NODE_VM = new NodeVM()

module.exports = function (moduleName, opts) {

  if (opts === undefined) {
    opts = {}
  }

  const node = opts.node || NODE_VM
  const modulePath = resolveSync(moduleName, opts)
  const watcher = chokidar.watch([modulePath], Object.assign(opts, { ignoreInitial: true, usePolling: true }))

  node.on('require', e => {
    if (isInScope(e.module)) {
      watcher.add(e.module.filename)
    }
  })

  let mod = node.getModule(modulePath, opts)

  function isInScope(child) {
    while (child !== null) {
      if (child.filename === modulePath) {
        return true
      }
      child = child.parent
    }
    return false
  }

  function unwatchDeps(mod) {
    for (const child of mod.children) {
      watcher.unwatch(mod.filename)
      unwatchDeps(child)
    }
  }

  function reload() {
    mod = mod.reload()
    res.exports = mod.exports
  }

  const res = new EventEmitter()
  res.close = () => watcher.close
  res.exports = mod.exports;
  res.forceReload = reload

  watcher
    .on('add', filePath => {
      const added = mod.require(filePath)
      reload()
      res.emit('change', mod.exports)
    })
    .on('change', filePath => {
      const changed = node.getModule(filePath)
      unwatchDeps(changed)
      reload()
      res.emit('change', mod.exports)
    })
    .on('ready', () => {
      res.emit('ready')
    })

  //mod.forceReload()

  return res
}

