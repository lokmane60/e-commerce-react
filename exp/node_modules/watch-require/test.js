
const path = require('path')
    , fs = require('fs')
    , test = require('ava')
    , chokidar = require('chokidar')

const watchRequire = require('./index')

const TMP_DIR = __dirname;

function triggered(emitter, eventName) {
  return new Promise(accept => { emitter.on(eventName, accept) })
}

test.cb('chokidar behaves nicely', t => {
  fs.writeFileSync(path.join(TMP_DIR, 'test_chk.txt'), `foo!`)
  const watcher = chokidar.watch(path.join(TMP_DIR, 'test_chk.txt'), { usePolling: true, ignoreInitial: true })
    .on('change', filePath => {
      watcher.close()
      t.fail()
    })
    .on('ready', () => {
      watcher.close()
      t.end()
    })
})

test.cb('require watcher emits an event when the script itself changes', t => {
  fs.writeFileSync(path.join(TMP_DIR, 'test_self.js'), `module.exports.foo = 1`)
  const watched = watchRequire(path.join(TMP_DIR, 'test_self'))
  watched
    .on('change', exports => {
      t.is(exports.foo, 2)
      watched.close()
      t.end()
    })
    .on('ready', () => {
      setTimeout(() => fs.writeFileSync(path.join(TMP_DIR, 'test_self.js'), `module.exports.foo = 2`), 1000)
    })
})

test.cb('require watcher emits an event when one of its dependencies is changed', t => {
  fs.writeFileSync(path.join(TMP_DIR, 'test_dep.js'), `module.exports.foo = require('./test_dep_dep')`)
  fs.writeFileSync(path.join(TMP_DIR, 'test_dep_dep.js'), `module.exports.baz = 3`)
  const watched = watchRequire(path.join(TMP_DIR, 'test_dep'))
  watched
    .on('change', exports => {
      t.is(exports.foo.baz, 4)
      watched.close()
      t.end()
    })
    .on('ready', () => {
      setTimeout(() => fs.writeFileSync(path.join(TMP_DIR, 'test_dep_dep.js'), `module.exports.baz = 4`), 1000)
    })
})

test('require watcher can force-reload itself with dependencies', t => {
  fs.writeFileSync(path.join(TMP_DIR, 'test_force_reload.js'), `module.exports.foo = require('./test_force_reload_dep')`)
  fs.writeFileSync(path.join(TMP_DIR, 'test_force_reload_dep.js'), `module.exports = 33`)
  const mod = watchRequire(path.join(TMP_DIR, './test_force_reload'))
  t.is(mod.exports.foo, 33)
  fs.writeFileSync(path.join(TMP_DIR, 'test_force_reload_dep.js'), `module.exports = 34`)
  mod.forceReload()
  t.is(mod.exports.foo, 34)
})

test('require watcher can force-reload itself with cyclic dependencies', t => {
  fs.writeFileSync(path.join(TMP_DIR, 'test_cyc_force_reload.js'), 
    `module.exports = require('./test_cyc_force_reload_dep_a')`)
  fs.writeFileSync(path.join(TMP_DIR, 'test_cyc_force_reload_dep_a.js'), 
    `module.exports.foo = 1; module.exports.b = require('./test_cyc_force_reload_dep_b')`)
  fs.writeFileSync(path.join(TMP_DIR, 'test_cyc_force_reload_dep_b.js'), 
    `module.exports.foo = 2; module.exports.a = require('./test_cyc_force_reload_dep_a')`)
  const mod = watchRequire(path.join(TMP_DIR, './test_cyc_force_reload'))
  t.is(mod.exports.foo, 1)
  t.is(mod.exports.b.foo, 2)
  t.is(mod.exports.b.a, mod.exports)
  t.is(mod.exports.b, mod.exports.b.a.b)
  fs.writeFileSync(path.join(TMP_DIR, 'test_cyc_force_reload_dep_a.js'), 
    `module.exports.foo = 3; module.exports.b = require('./test_cyc_force_reload_dep_b')`)
  fs.writeFileSync(path.join(TMP_DIR, 'test_cyc_force_reload_dep_b.js'), 
    `module.exports.foo = 4; module.exports.a = require('./test_cyc_force_reload_dep_a')`)
  mod.forceReload()
  t.is(mod.exports.foo, 3)
  t.is(mod.exports.b.foo, 4)
  t.is(mod.exports.b.a, mod.exports)
  t.is(mod.exports.b, mod.exports.b.a.b)
})

test.cb('require watcher shares cache with multiple instances just like a normal require', t => {
  fs.writeFileSync(path.join(TMP_DIR, 'test_cache_foo.js'), `module.exports.foo = 42`)
  fs.writeFileSync(path.join(TMP_DIR, 'test_cache_dep.js'), `
  const ex = require('./test_cache_foo')
  ex.foo++
  module.exports = ex;
  `)
  fs.writeFileSync(path.join(TMP_DIR, 'test_cache_a.js'), `module.exports = null`)
  fs.writeFileSync(path.join(TMP_DIR, 'test_cache_b.js'), `module.exports = null`)
  const a = watchRequire(path.join(TMP_DIR, 'test_cache_a'))
  const b = watchRequire(path.join(TMP_DIR, 'test_cache_b'))
  let aDone = false, bDone = false
  a.on('change', exports => {
    t.is(exports, 43)
    aDone = true
    if (bDone)
      t.end()
  })
  b.on('change', exports => {
    t.is(exports, 43)
    bDone = true
    if (aDone)
      t.end()
  })
  Promise.all([triggered(a, 'ready'), triggered(b, 'ready')]).then(() => {
    setTimeout(() => {
      fs.writeFileSync(path.join(TMP_DIR, 'test_cache_a.js'), `module.exports = require('./test_cache_dep.js').foo`)
      fs.writeFileSync(path.join(TMP_DIR, 'test_cache_b.js'), `module.exports = require('./test_cache_dep.js').foo`)
    }, 1000)
  })
})

